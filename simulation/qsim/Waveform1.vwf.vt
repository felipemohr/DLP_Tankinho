// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2022 14:52:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DLP_Tankinho
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DLP_Tankinho_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALNBP_CLK;
reg SNAT;
reg SNBP;
reg SNBT;
// wires                                               
wire ALNBP;
wire ASNBP;
wire BH;
wire [0:6] NT_DISPLAY;

// assign statements (if any)                          
DLP_Tankinho i1 (
// port map - connection between master ports and signals/registers   
	.ALNBP(ALNBP),
	.ALNBP_CLK(ALNBP_CLK),
	.ASNBP(ASNBP),
	.BH(BH),
	.NT_DISPLAY(NT_DISPLAY),
	.SNAT(SNAT),
	.SNBP(SNBP),
	.SNBT(SNBT)
);
initial 
begin 
#1000000 $finish;
end 

// ALNBP_CLK
initial
begin
	ALNBP_CLK = 1'b0;
end 

// SNAT
initial
begin
	SNAT = 1'b1;
	SNAT = #320000 1'b0;
	SNAT = #120000 1'b1;
end 

// SNBP
initial
begin
	SNBP = 1'b0;
	SNBP = #620000 1'b1;
	SNBP = #100000 1'b0;
end 

// SNBT
initial
begin
	SNBT = 1'b1;
	SNBT = #80000 1'b0;
	SNBT = #100000 1'b1;
end 
endmodule

